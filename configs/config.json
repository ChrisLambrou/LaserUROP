// Contains default parameters for the microscope and all associated experiments.

{
    // Camera parameters.
	"max_resolution":	    [2592, 1944],   // Tuples are not supported, use lists instead. Format is [x, y].
    "resolution":	    	[640, 480],     // Irrelevant for bayer images.
    "greyscale":		    false,          // Note the difference in Boolean notation compared to Python's False.
                                            // Whether to convert images to greyscale after capture.
	"videoport":		    true,           // Whether to capture frames using the videoport setting.
	"mode":		            "compressed",        // Valid modes are "bayer", "compressed" and "bgr".
	"iterator":			    false,    //check, AND ADD ROI????
    "cv2camera":            false,
    "manual_mode":          true,

    // Stage parameters.
    "channel":              1,                      // Varies depending on model of RPi used.
    "xyz_bound":            [320000, 320000, 320000],  // Stage cannot be displaced by > [x_bound, y_bound, z_bound]
                                                    // microsteps from original position. Set 'override' to true to
                                                    // ignore these bounds.
    "microsteps":           16,                     // Microsteps per step???
    "backlash":             [128, 128, 128],        // Backlash in microsteps for [x, y, z] gears.
    "override":             false,

    // GUI parameters.
    "key_stepsize":         1000,           // No. of microsteps per key press on GUI.
    "exit":                 "x",            // Control keys for the GUI.
    "save":                 "g",
    "save_stored_image":    "t",
    "stop_tracking":        "z",
    "+x":                   "s",
    "-x":                   "w",
    "+y":                   "d",
    "-y":                   "a",
    "+z":                   "e",    // Not sure about the exact direction of +z AND -z
    "-z":                   "q",
    "invert_colour":        "i",            // Inverts the selection box colour.

    //Measurement parameters.
    "microns_per_pixel":        0.4846,         // Spatial conversions from pixels to microns. This needs to be updated
                                                // by manual measurement of the graticule.
    "camera_stage_transform":  [[5.2, 7.0],     // Store a conversion matrix, can be updated with result of calibrate()
                                [6.3, -5.6]],    // if necessary.

    "n":                20,      // The number of steps per axis to take, i.e. generates an n+1 x n+1 images in total.
    "steps":            100,    // The number of steps to take between each image.
    "focus":            false,  // Whether to autofocus between each tile. For the first image, a full auto-focus is
                                // performed, and a quick one on subsequent tiles.
    "crop_fraction":    50,
    "pixel_block":      4,

    "n_steps":            [[10, 200]],  // The number of steps per axis to take, i.e. generates an n+1 x n+1 images in total.
    "parabola_N":           10,
    "parabola_step":        50,
    "parabola_iterations":  3,          // Align parabolically along each of x and y this many times.

    "group_name":       "tests",
    "sharpness_func":   "laplacian",    // Algorithm used to calculate sharpness. Currently, valid inputs include
                                        // 'laplacian'. Change as more sharpness functions are added.
    "mmt_range":        [[5, 100]],    // List of positions to make sharpness measurements for. The format is
                        // [10,  200],    // [[n, z microsteps], ...]. For example, [[20, 1000], ...] will take sharpness
                        // [10,  200],    // measurements in intervals of 1000 microsteps from -1000 * 20 / 2 to
                        // [12,  100]],   // +1000 * 20 / 2, resulting in 21 total measurements. It will then move to the
                                        // region of highest sharpness and continue with the next set in the main list.
    "crop_fraction":     0.3,           // Fraction of each image to crop per dimension. The centre of the image will
                                        // be cropped by default. For a value of 0.5, the central 50% of x and y will be
                                        // cropped, so the central 25% of the image's area will be retained.
    "pixel_block":      4               // The number of pixels per dimension to group. For a value of 4, the image will
                                        // be down-sampled by a factor of 16 by grouping pixels into 4x4 squares.


}

